//<LICENCE>

#ifndef WAVELETS_HPP_
#define WAVELETS_HPP_

//#define TUNING_WAVELETS
#include <cmath>
#include <algorithm>

#include "../../base/kiplenums.h"
#include "../../io/io_tiff.h"
#include "../wavelets.h"

using namespace std;


template <typename T>
std::ostream & operator<<(std::ostream & s, const kipl::wavelets::WaveletKernel<T> &wk)
{
	s<<"Wavelet :"<<wk.name()<<"\n";
	s<<"Ht: ";
	T const * const H=wk.transH();
	for (int i=wk.begin(); i<=wk.end(); i++)
		s<<H[i]<<(i==wk.end() ? "\n": ", ");

	s<<"Gt: ";
	T const * const G=wk.transG();
	for (int i=wk.begin(); i<=wk.end(); i++)
		s<<G[i]<<(i==wk.end() ? "\n": ", ");

	T const * const Hs=wk.synthH();
	s<<"Hs: ";
	for (int i=wk.begin(); i<=wk.end(); i++)
		s<<Hs[i]<<(i==wk.end() ? "\n": ", ");

	s<<"Gs: ";
	T const * const Gs=wk.synthG();
	for (int i=wk.begin(); i<=wk.end(); i++)
		s<<Gs[i]<<(i==wk.end() ? "\n": ", ");

	return s;
}

template <typename T>
std::ostream & operator<<(std::ostream & s, const kipl::wavelets::WaveletTransform<T> &wt)
{
	s<<wt.Kernel();
	return s;
}

namespace kipl { namespace wavelets {

template <typename T>
WaveletKernel<T>::WaveletKernel(std::string name) :
	m_nBegin(0),
	m_nEnd(0)
{
	memset(m_tH,0,512*sizeof(T));
	memset(m_tG,0,512*sizeof(T));

	BuildKernel(name);
}

template <typename T>
list<std::string> WaveletKernel<T>::NameList() {
	list<std::string> names;
	names.push_back("daub1");
	names.push_back("daub2");
	names.push_back("daub3");
	names.push_back("daub4");
	names.push_back("daub5");
	names.push_back("daub6");
	names.push_back("daub7");
	names.push_back("daub8");
	names.push_back("daub9");
	names.push_back("daub10");
	names.push_back("daub11");
	names.push_back("daub12");
	names.push_back("daub13");
	names.push_back("daub14");
	names.push_back("daub15");
	names.push_back("daub16");
	names.push_back("daub17");
	names.push_back("daub18");
	names.push_back("daub19");
	names.push_back("daub20");
	names.push_back("daub21");
	names.push_back("daub22");
	names.push_back("daub23");
	names.push_back("daub24");
	names.push_back("daub25");
	names.push_back("daub26");
	names.push_back("daub27");
	names.push_back("daub28");
	names.push_back("daub29");
	names.push_back("daub30");

	return names;

}
template <typename T>
void WaveletKernel<T>::BuildKernel(std::string name)
{
	m_sName=name;
	if (name.substr(0,4)=="daub") {

		int N=atoi(name.substr(4).c_str());
		switch (N) {
		case 1: {
			double daub1[]={0.707106781186547524400844362104849, 0.707106781186547524400844362104849};
			CopyKernel(daub1,0,1);
		 break;
		}
		case 2:  {
			double daub2[]={ 0.4829629131445341433748716, 0.836516303737807905575294, 0.224143868042013381025973, -0.1294095225512603811744494};
			CopyKernel(daub2,0,3);
			break;
		}
		case 3: {
			double daub3[]={0.332670552950082615998512, 0.806891509311092576494494, 0.459877502118491570095152, -0.135011020010254588696390, 0.085441273882026661692819, 0.0352262918857095366027407};
			CopyKernel(daub3,0,5);
			break;
		}
		case 4: {
			double daub4[]={0.2303778133088965, 0.7148465705529158, 0.630880767929859, -0.02798376941686011, -0.1870348117190932, 0.0308413818355608, 0.03288301166688522, -0.01059740178506904};
			CopyKernel(daub4,0,7);
			break;
		}
		case 5: {
			double daub5[]={0.1601023979741924, 0.6038292697971881, 0.7243085284377715, 0.1384281459013217, -0.2422948870663802, -0.03224486958463778, 0.07757149384004565, -0.006241490212798174, -0.01258075199908194, 0.003335725285473757};
			CopyKernel(daub5,0,9);
			break;
		}
		case 6: {
			double daub6[]={0.11154074335011, 0.4946238903984554, 0.7511339080210982, 0.315250351709197, -0.2262646939654429, -0.1297668675672638, 0.0975016055873231, 0.02752286553030565, -0.03158203931748625, 0.0005538422011615105, 0.004777257510945544, -0.001077301085308486};
			CopyKernel(daub6,0,11);
			break;
		}
		case 7: {
			double daub7[]={0.07785205408500813, 0.3965393194819123, 0.7291320908462274, 0.4697822874051917, -0.1439060039285563, -0.2240361849938672, 0.07130921926683042, 0.080612609151082, -0.03802993693501439, -0.016574541630667, 0.01255099855609955, 0.0004295779729213739, -0.001801640704047446, 0.0003537137999745171};
			CopyKernel(daub7,0,13);
			break;
		}
		case 8: {
			double daub8[]={0.05441584224310704, 0.3128715909143165, 0.6756307362973218, 0.5853546836542239, -0.01582910525637238, -0.2840155429615815, 0.0004724845739030209, 0.1287474266204823, -0.01736930100181088, -0.04408825393079791, 0.01398102791739956, 0.00874609404740648, -0.004870352993451852, -0.000391740373376942, 0.0006754494064506183, -0.0001174767841247786};
			CopyKernel(daub8,0,15);
			break;
		}
		case 9: {
			double daub9[]={0.03807794736388813, 0.2438346746126514, 0.6048231236902548, 0.6572880780514298, 0.1331973858249681, -0.2932737832793372, -0.0968407832230689, 0.148540749338104, 0.03072568147931585, -0.06763282906135907, 0.0002509471148277948, 0.02236166212368439, -0.004723204757752752, -0.004281503682464633, 0.001847646883056686, 0.0002303857635232296, -0.0002519631889427889, 0.00003934732031628112};
			CopyKernel(daub9,0,17);
			break;
		}
		case 10: {
			double daub10[]={0.02667005790054869, 0.188176800077648, 0.527201188931628, 0.6884590394535462, 0.2811723436606982, -0.2498464243271048, -0.1959462743773243, 0.127369340335694, 0.0930573646035142, -0.07139414716638016, -0.0294575368218849, 0.03321267405931551, 0.003606553566951515, -0.0107331754833277, 0.001395351747051327, 0.001992405295184184, -0.0006858566949593225, -0.0001164668551292262, 0.0000935886703200315, -0.00001326420289451403};
			CopyKernel(daub10,0,19);
			break;
		}
		case 11: {
			double daub11[]={0.01869429776144806, 0.1440670211504498, 0.4498997643555165, 0.6856867749154562, 0.4119643689476272, -0.1622752450269621, -0.2742308468172826, 0.06604358819685894, 0.1498120124663909, -0.04647995511648684, -0.06643878569486228, 0.03133509021904213, 0.02084090436017028, -0.01536482090617611, -0.003340858873009247, 0.0049284176560525, -0.0003085928588149355, -0.00089302325066525, 0.0002491525235524301, 0.00005443907469928305, -0.00003463498418694142, 0.000004494274277230458};
			CopyKernel(daub11,0,21);
			break;
		}
		case 12: {
			double daub12[]={0.01311225795736534, 0.1095662728222715, 0.3773551352176745, 0.657198722584349, 0.5158864784293156, -0.04476388565908393, -0.3161784537592869, -0.02377925725693821, 0.1824786059298069, 0.00535956967427179, -0.0964321200976865, 0.0108491302560784, 0.04154627749559747, -0.01221864906995923, -0.01284082519846823, 0.00671149900888981, 0.002248607241020708, -0.002179503618657147, 0.000006545128213682533, 0.0003886530628261407, -0.0000885041092094801, -0.00002424154575734139, 0.00001277695221955214, -0.000001529071758089919};
			CopyKernel(daub12,0,23);
			break;
		}
		case 13: {
			double daub13[]={0.00920213353936357, 0.082861243876398, 0.3119963221728867, 0.6110558511805082, 0.5888895704451372, 0.0869857261666496, -0.314972907739053, -0.124576730762086, 0.1794760794355785, 0.07294893365742099, -0.1058076181950538, -0.02648840647689916, 0.05613947710301562, 0.002379972253836755, -0.02383142071161908, 0.003923941449079961, 0.007255589402002825, -0.002761911234808676, -0.001315673911943637, 0.000932326130928484, 0.00004925152513188404, -0.0001651289885636495, 0.00003067853758174376, 0.00001044193057207212, -0.000004700416479607929 , 0.0000005220035098765021};
			CopyKernel(daub13,0,25);
			break;
		}
		case 14: {
			double daub14[]={0.006461153459818989, 0.0623647588469322, 0.2548502677833766, 0.5543056179241174, 0.6311878490950694, 0.2186706877760189, -0.2716885522429336, -0.2180335299738394, 0.138395213856541, 0.1399890165735457, -0.0867484115685856, -0.07154895550625034, 0.05523712625188016, 0.02698140830446938, -0.0301853515397028, -0.005615049530747707, 0.01278949326524909, -0.000746218989436958, -0.003849638867994312, 0.001061691085418039, 0.0007080211541344865, -0.0003868319473184179, -0.00004177724577935138, 0.00006875504251988474, -0.00001033720918460207, -0.000004389704901652653, 0.000001724994675254821, -0.000000178713996820958};
			CopyKernel(daub14,0,27);
			break;
		}
		case 15 :{
			double daub15[]= {0.004538537356680069, 0.0467433948433292, 0.2060238637760462, 0.4926317712332494, 0.6458131398235114, 0.339002535383428, -0.19320413905893, -0.2888825960016258, 0.06528295291444258, 0.1901467139017971, -0.03966617641454303, -0.1111209358626346, 0.03387714389352461, 0.05478055052762776, -0.0257670072911817, -0.02081005014572826, 0.01508391800773139, 0.005101000354434229, -0.006487734552531616, -0.0002417564910950625, 0.001943323977748212, -0.0003734823537271217, -0.0003595652439869339, 0.0001558964896924794, 0.00002579269911910246, -0.00002813329623232866, 0.000003362987176654478,0.000001811270405641324, -0.0000006316882317817563, 0.00000006133359905269254};
			CopyKernel(daub15,0,29);
			break;
		}
		case 16 : {
			double daub16[] ={ 0.003189220905181802, 0.0349077141074775, 0.1650642824989111, 0.4303127204089899, 0.6373563289234388, 0.4402902557886062, -0.0897510867287953, -0.3270633068118058, -0.02791820715372535, 0.2111906930487478, 0.02734026408611786, -0.1323883043443139, -0.00623972263724492, 0.07592423555847598, -0.00758897425298305, -0.03688839741760147, 0.01029765955546528, 0.01399376876290007, -0.006990014507518413, -0.003644279596729619, 0.003128023357662664, 0.000407896978913364, -0.000941021742187743, 0.000114241519113091, 0.0001747872440135933, -0.00006103596571228747, -0.00001394566888488284, 0.00001133660857799308, -0.000001043571333041443, -0.0000007363656730469882, 0.0000002308784069376313, -0.00000002109339613774453};
			CopyKernel(daub16,0,31);
			break;
		}
		case 17 : {
			double daub17[] = {0.002241806968367765, 0.02598539333038641, 0.1312149014643511, 0.3703507191428474, 0.6109966080619875, 0.5183157592365552, 0.02731497388861195, -0.3283207398752789, -0.1265997478695799, 0.1973105883690036, 0.1011354893285621, -0.1268156885448092, -0.05709141812622551, 0.081105985705437, 0.02231233608959475, -0.04692243752178137, -0.003270955473782776, 0.02273367623263168, -0.003042989911563062, -0.00860292137975392, 0.002967996640915282, 0.002301205207197428, -0.001436845280352317, -0.0003281325149411173, 0.0004394654201169656, -0.00002561010931458864, -0.0000820480308801988, 0.00002318681330990614, 0.000006990600842366534, -0.000004505942411707292, 0.0000003016549532645506, 0.0000002957700881589635, -0.0000000842394830828037, 0.000000007267492843919008};
			CopyKernel(daub17,0,33);
			break;
		}
		case 18 : {
		double daub18[] = {0.001576310332632241, 0.01928853309434481, 0.1035884729715391, 0.3146789620466176, 0.571826841995251, 0.5718016803655575, 0.147223099399332, -0.2936540837163994, -0.2164809618743174, 0.1495339814252923, 0.1670813196471977, -0.0923318969776604, -0.1067522571200224, 0.0648872212223416, 0.05705125157931265, -0.04452614611490133, -0.02373321210978654, 0.02667070832113655, 0.006262168357742094, -0.01305148206344844, 0.0001186301071328846, 0.004943344018360076, -0.001118732786346494, -0.001340596411265555, 0.0006284657384942994, 0.0002135815764103265, -0.000198648570821057, -0.000000153591634265962, 0.00003741238184339052, -0.00000852060341054129, -0.00000333263477007513, 0.00000176871313748643, -0.00000007691633640217469, -0.0000001176098869880653, 0.00000003068836137122469, -0.000000002507934683892356};
			CopyKernel(daub18,0,35);
			break;
		}
		case 19 : {
			double daub19[]= {0.001108669779715294, 0.01428109865333334, 0.081278114333354, 0.2643884347822977, 0.5244363819574067,
					0.6017045501513535, 0.2608949440110274, -0.2280914100170829, -0.285838641929714, 0.07465227262054114,
					0.2123497512548378, -0.03351853842979753, -0.1427856935054576, 0.02758435493215239, 0.0869067594236619,
					-0.02650123589611068, -0.04567422669495623, 0.02162376812192859, 0.01937555029280247, -0.01398838901012597,
					-0.00586692239134182, 0.007040747519198927, 0.0007689543646753964, -0.002687551858597481, 0.0003418086639330359,
					0.0007358025360798398, -0.0002606761416764582, -0.0001246007941078683, 0.0000871127066319985, 0.000005105950548947162,
					-0.00001664017665533139, 0.000003010964385934741, 0.000001531931507655374, -0.0000006862755810090276,
					0.00000001447088339408005, 0.00000004636937873589416, -0.000000011164020912898, 0.000000000866684902796269};
			CopyKernel(daub19,0,37);
			break;
		}
		case 20 : {
			double daub20[]={0.0007799530020084384, 0.0105493864101072, 0.06342373157542249, 0.2199419467839922, 0.4726958375631425,
					0.6104928215175741, 0.3615021297395791, -0.139211825416023, -0.3267863905078842, -0.01672694530514085,
					0.2282909876975237, 0.03985032729018178, -0.1554585361790331, -0.02471674917392653, 0.1022916746204368,
					0.005632268726873665, -0.06172283526148656, 0.005874682288534986, 0.03229427583633914, -0.00878931595226129,
					-0.01381051445886118, 0.006721621652169426, 0.004420538864131319, -0.003581491222634283, -0.00083156152944895,
					0.001392558453825609, -0.00005349753868856166, -0.0003851044297986765, 0.0001015328014373285, 0.00006774275277093538,
					-0.00003710583043522718, -0.000004376140493506968, 0.000007241242222701708, -0.000001011993125412585,
					-0.0000006847073928591012, 0.0000002633921999175421, 0.0000000002014328820034285, -0.0000000181484172957345,
					0.000000004056123630675098, -0.0000000002998833944499773 };
			CopyKernel(daub20,0,39);
			break;
		}
		case 21 : {
			double daub21[]={0.0005488240399453808, 0.007776660464348811, 0.04924790475876491, 0.1813601028599902, 0.419688998145241,
					0.6015074510688103, 0.4445910837993439, -0.03572381948901234, -0.33566575122537, -0.1123978514710653,
					0.2115648260162405, 0.1152333439473735, -0.1399410472763452, -0.08177625782428998, 0.09660066710664022,
					0.04572352417673011, -0.06497770623152748, -0.01865389796875268, 0.03972696757220106, 0.003357765554657301,
					-0.02089211624987374, 0.002403482102825579, 0.008988852342563074, -0.002891344156898007, -0.002958382842307337,
					0.001716612683276365, 0.0006394203289590759, -0.0006906733219030776, -0.00003196410553726866, 0.0001936652571660039,
					-0.0000363553295677002, -0.00003499676704742804, 0.00001535487521020741, 2.79033850314008e-6, -3.090027001911602e-6,
					3.16610662424439e-7, 2.99214595113828e-7, -1.000404119487493e-7, -2.254019869522092e-9, 7.058055911572644e-9,
					-1.471958939283684e-9, 1.038808947669207e-10};
			CopyKernel(daub21,0, 41);
			break;
		}
		case 22 : {
			double daub22[]={0.0003862673246197253, 0.005721914066631049, 0.03807032187691932, 0.1483689789282081, 0.3677320057234413,
				0.5784372354311235, 0.5079033273631367, 0.07372115020105462, -0.3127333476121842, -0.2005720141344328,
				0.1640948426591233, 0.179974931810035, -0.0971123372197599, -0.1317696149504392, 0.06807740848784511,
				0.08455839833964807, -0.05136497255398131, -0.04653131832736136, 0.03697137276735332, 0.02058693268949487,
				-0.02348031395539096, -0.006213835918293782, 0.01256489065516637, 0.0003001305020824184, -0.005455761185358356,
				0.001044278408986017, 0.001827032986409597, -0.000770702101944467, -0.0004237923063271874, 0.0003286138886837352,
				0.0000434593692542139, -0.00009405347080647135, 0.00001137454223403893, 0.00001737397675279249,
				-6.166816318076451e-6, -1.565197277819435e-6, 1.295199441207159e-6, -8.78003044824892e-8, -1.283352833826032e-7,
				3.761280659022215e-8, 1.680187679020641e-9, -2.729659356918619e-9, 5.33601149622179e-10, -3.60216327759258e-11};
			CopyKernel(daub22,0, 43);
		 	break;
		}
		case 23 : {
			double daub23[]={0.0002719278182602901, 0.004203109552950134, 0.02931247643736339, 0.1205254471036576,
					0.3184759568589838, 0.5449708209347766, 0.5510501337055957, 0.1813841378320262, -0.2614398761995617,
					-0.2714429864972958, 0.0921245749243952, 0.2235864349031235, -0.03304774793732929, -0.164030308293076,
					0.02028436820991752, 0.1123069840244809, -0.0211292480280753, -0.07021415427385447, 0.02176834655240395,
					0.03849895908078205, -0.01852549112315692, -0.01753870400805271, 0.01275326613768589, 0.006032371159860696,
					-0.00707603267773538, -0.001134947880346942, 0.003123184807392083, -0.000246537026777104, -0.001061334361043996,
					0.000319454992361999, 0.0002567865998070605, -0.0001500373078747796, -0.00003379188332733358,
					0.00004426515179248939, -2.635561787093299e-6, -8.348692795439998e-6, 2.397822036092728e-6, 8.148343038224153e-7,
					-5.339546450998099e-7, 1.853340229309923e-8, 5.418084825798256e-8, -1.400079829615052e-8,
					-9.473736128438874e-10, 1.050551729533758e-9, -1.93260193304542e-10, 1.250331739337031e-11};

			CopyKernel(daub23,0, 45);
			break;
		}
		case 24 : {
			double daub24[]={0.0001914240079776934, 0.003081894336144903, 0.02248099723913652, 0.09725657409395711,
					0.272893661713225, 0.5043448957614517, 0.5749146829767083, 0.2809851510053765, -0.1872418464658568,
					-0.3179111538203686, 0.004781510762825361, 0.2392258659829295, 0.042531243536347, -0.1711600617797226,
					-0.03877318682438014, 0.1210092088290207, 0.02098022912439134, -0.08215538086453539, -0.004578395730450242,
					0.05129798128535279, -0.004944235600686442, -0.02821125709939177, 0.007661004281903052, 0.01304905186620713,
					-0.006290964935213451, -0.004746267936383896, 0.00373576397589871, 0.001153694353296646,
					-0.001696334910033699, -0.00004416435334971148, 0.0005860851561798487, -0.000118113728929818,
					-0.0001459980983446589, 0.00006558881863639525, 0.00002183096348720674, -0.00002022741617379432,
					1.337052417608915e-8, 3.900821594914755e-6, -8.979550384702172e-7, -4.032228084773544e-7,
					2.166180932866001e-7, -5.054643465620961e-10, -2.255577015054618e-8, 5.157391468496204e-9,
					4.748066278754132e-10, -4.024365393060184e-10, 6.991284124010881e-11, -4.342457865150871e-12};
			CopyKernel(daub24,0, 47);
			break;
		}
		case 25 : {
			double daub25[]={0.0001349140099190347, 0.002258811421928896, 0.01720076826024011, 0.07809905498823061,
					0.2318787664012299, 0.4600423810287615, 0.5820659400767751, 0.3680932821030804, -0.0973914656330337,
					-0.3369053502250008, -0.08780821918435377, 0.2245876085890194, 0.118127995249711, -0.1507901382415503,
					-0.09866413500669811, 0.1066759749914026, 0.06677659879664328, -0.07716829308409851, -0.03721412413495515,
					0.05365935822485196, 0.01555326324900022, -0.03407222558276132, -0.003082422156835764, 0.01893883135517686,
					-0.001991310900912701, -0.00886823166517666, 0.002729324227909382, 0.003325513663082694,
					-0.001844076742849583, -0.0009007311640167205, 0.0008780108981336599, 0.0001154141401669138,
					-0.0003101446827543741, 0.00003546902687895924, 0.00007911359754985811, -0.00002735413947239519,
					-0.00001278271963847119, 8.998380584459695e-6, 5.236962340729562e-7, -1.780721007596221e-6,
					3.214832263002398e-7, 1.924439055598693e-7, -8.66437988387495e-8, -2.613650299345624e-9,
					9.287154489811888e-9, -1.882036245600092e-9, -2.230357347052905e-10, 1.537216399287396e-10,
					-2.529795306330366e-11, 1.510990558374748e-12};
			CopyKernel(daub25,0, 49);
			break;
		}
		case 26 : {
			double daub26[]={0.00009530708038859017, 0.001656868123836205, 0.01314720410706837, 0.06250606229197543,
					0.1957418138928517, 0.4147036495252374, 0.5754107398988792, 0.4399868386830386, 0.0006482314969322565,
					-0.3286683153561501, -0.1761312111528923, 0.1816913689867606, 0.1831830668182874, -0.1050312703999788,
					-0.1486982692506746, 0.07011045982034708, 0.1068912945700292, -0.0537266384830414, -0.06894704034847887,
					0.04242624004825032, 0.03868775337450324, -0.03152516020142315, -0.01783137414738357, 0.02082822747155729,
					0.005850250889294673, -0.01183775075282269, -0.0005286445929395025, 0.005626389995436187,
					-0.0009441568905980419, -0.002154701581678454, 0.0008423574880071061, 0.0006186936351453407,
					-0.0004339336901681658, -0.0001064595891661173, 0.0001581831713311083, -5.320789264179316e-6,
					-0.00004127649917885159, 0.00001079395255722997, 7.02977999579203e-6, -3.905191127613338e-6,
					-4.667594612960618e-7, 7.974645353973284e-7, -1.08435079268455e-7, -8.943200709210774e-8,
					3.42341999210194e-8, 2.177262107414293e-9, -3.792891028734973e-9, 6.811567039682751e-10,
					1.006579366423491e-10, -5.866684945819865e-11, 9.172136139744166e-12, -5.276007064970005e-13};
			CopyKernel(daub26,0, 51);
			break;
		}
		case 27 : {
			double daub27[]={0.00006673872149511151, 0.001203137668007351, 0.00993279758864795, 0.04935409120328196,
					0.1625968984997917, 0.3663765259395975, 0.5527439178193798, 0.4924359105685437, 0.1027058342576776,
					-0.2889557557387392, -0.2474461888623674, 0.1150144625422689, 0.2272523873841615, -0.03832155648296467,
					-0.177343042305856, 0.01604057788838279, 0.1311256396502714, -0.01392849548777901, -0.09078545790901083,
					0.01730796960396632, 0.05786507441780795, -0.01847805801324325, -0.03267674778393725, 0.01611497448582646,
					0.01563354156651633, -0.01155587131719383, -0.0058506663766782, 0.006843439590864873, 0.001339810086454624,
					-0.00332645453512066, 0.0001455530318603602, 0.001298660053483377, -0.0003412046059349726,
					-0.000387145781985358, 0.0002015902406208919, 0.00007644902657909817, -0.00007696416829469141,
					-3.509397069674879e-6, 0.00002059474411072156, -3.893951746947512e-6, -3.650408533859476e-6,
					1.63127111134985e-6, 3.044829068015118e-7, -3.46582451783197e-7, 3.280563690463746e-8,
					4.018493485675348e-8, -1.318824367486114e-8, -1.306869789520419e-9, 1.518701939186517e-9,
					-2.410959890823335e-10, -4.366513030041424e-11, 2.209429321378077e-11, -3.289510708080241e-12,
					1.824712812357953e-13};
			CopyKernel(daub27,0, 53);
			 break;
		}
		case 28 : {
			double daub28[]={1.211047743815374e-8, 3.267487809959649e-7, 4.249360470332558e-6, 0.00003547130968570297,
					0.0002135126334180091, 0.0009870056015817535, 0.003643608943753939, 0.01102574472437807,
					0.02785108896673962, 0.05947888113543166, 0.1083140789939878, 0.1690181355970991, 0.2262481031266696,
					0.2588496911234176, 0.2503453388707027, 0.1995947587860312, 0.1234401161835469, 0.04825025615848,
					-0.004158546134641138, -0.0264450600473871, -0.02557924790973214, -0.01477493713347446,
					-0.004699317313650863, 0.0004286288871852111, 0.001441912062347365, 0.0007798364226686559,
					0.0001118367807675436, -0.0001148737637818006, -0.00008174555743868756, -0.00001408566491902967,
					0.00001088158969029414, 7.854039377726202e-6, 1.382602333517909e-6, -8.018781263653202e-7,
					-5.342958447854211e-7, -7.406470869588033e-8, 4.884561542582065e-8, 2.52941316901313e-8,
					2.033283999033068e-9, -2.082314434540087e-9, -7.562312393203476e-10, -1.893786638471123e-11,
					5.033972056269205e-11, 1.245472986259407e-11, 3.502289821348764e-14, -5.009158314188483e-13,
					-9.301554872784974e-14, -5.839470253292184e-15};
			CopyKernel(daub28,0, 55);
			break;
		}
		case 29 : {
			double daub29[]={0.00003239805321497529, 0.000626112485243617, 0.005575206719387898, 0.03012518893507054,
					0.1092097063536612, 0.2759242025819814, 0.4836685031883162, 0.5498679428280394, 0.2998422010389294,
					-0.1317439925338275, -0.3101850936244796, -0.05229088231113438, 0.2268786895428327, 0.1060344622372798,
					-0.160772321111192, -0.1115202396196644, 0.104493130624083, 0.07661868702714079, -0.08522136815816706,
					-0.05582740169957647, 0.05990107814489941, 0.02915667122863612, -0.04394377263552723, -0.01284951124335292,
					0.0284152783211224, 0.002667065633969257, -0.01648476578506601, 0.001619386882381502, 0.008204339752424292,
					-0.002437931998308282, -0.003369238363376656, 0.001805309853822338, 0.00105745287452836,
					-0.0009649679059385645, -0.0001962986257326389, 0.0003971279496741955, -0.00002114513475278239,
					-0.0001251046338012241, 0.00003495779122912868, 0.00002824609178126792, -0.00001596666242495263,
					-3.505038888415576e-6, 4.586211089218378e-6, -2.851657810447294e-7, -8.680006185076109e-7,
					2.533361059767305e-7, 9.105016448983842e-8, -6.063866443256952e-8, 9.758187924880584e-10,
					7.507406686239132e-9, -1.823594282183954e-9, -3.323805170111371e-10, 2.323225131545086e-10,
					-2.828621328565828e-11, -7.576706186098782e-12, 3.042714655172977e-12, -4.132857672909501e-13,
					2.13899757115254e-14};
			CopyKernel(daub29,0, 57);
		    break;
		}
		case 30 : {
			double daub30[]={0.00002615585455662566, 0.0005226761996429875, 0.004826202107796007, 0.02714374258512379,
					0.1029644344986241, 0.2744184881531404, 0.5146964381107649, 0.6465501760007262, 0.4442399372717824,
					-0.03972066454231105, -0.3577922225280101, -0.173885959744125, 0.1883566040943439, 0.1619872365035501,
					-0.1627362276857219, -0.2141422236342482, 0.04155570744210578, 0.1064681015657777, -0.07949696298413821,
					-0.1127842840221944, 0.03645776140450095, 0.05653158679697427, -0.04198168339298309, -0.03775013971867139,
					0.0284211228195374, 0.01672057027498178, -0.02015983858171372, -0.006068848400478711, 0.01190513248366339,
					0.0007943935255106691, -0.006057399589642734, 0.0008717548869096432, 0.002556672115147139,
					-0.0009223262690782989, -0.0008487174241528229, 0.0005470332102263489, 0.0001929057487633004,
					-0.0002354170321940438, -0.00001090223005599309, 0.00007636351982309536, -0.00001421256782789888,
					-0.00001798184311850345, 7.839166338344742e-6, 2.584235896275433e-6, -2.379773902924532e-6,
					1.798690572938102e-9, 4.65792080742087e-7, -1.076049596909837e-7, -5.241326860987518e-8,
					2.829676741825799e-8, 6.850411063016604e-10, -3.635128922800788e-9, 7.544548411678784e-10,
					1.775376276488229e-10, -1.02944225497641e-10, 1.077136079985528e-11, 3.544611903266368e-12,
					-1.289600664671238e-12, 1.676493902544079e-13, -8.390494288059615e-15};
			CopyKernel(daub30,0, 59);
			break;
		}
		default :
			throw kipl::base::KiplException("Daubechies are only supported for N<=30", __FILE__, __LINE__);
		}
	}

}

template<typename T>
void WaveletKernel<T>::CopyKernel(double *k, int start, int end)
{
	m_nBegin=start;
	m_nEnd=end;


	double sgn=start & 1 ? 1.0: -1.0;
	for (int i=0; i<size(); i++) {
		m_tH[i]=static_cast<T>(k[end-i]);
		m_tG[i]=static_cast<T>(sgn*k[i]);
		m_sH[i]=static_cast<T>(k[i]);
		sgn*=-1.0;
	}

	for (int i=0; i<size(); i++)
		m_sG[i]=m_tG[end-i];
}

template<typename T>
void WaveletQuad<T>::SaveQuad(std::string fname)
{
	ptrdiff_t pos=fname.find_last_of('.');
	std::string base=fname.substr(0,pos);
	std::string ext=fname.substr(pos);

	std::ostringstream namemaker;
	namemaker.str("");
	namemaker<<base<<"_a"<<N<<ext;

    kipl::io::WriteTIFF(a, namemaker.str(),kipl::base::Float32);

	namemaker.str("");
	namemaker<<base<<"_v"<<N<<ext;
    kipl::io::WriteTIFF(v, namemaker.str(),kipl::base::Float32);

	namemaker.str("");
	namemaker<<base<<"_h"<<N<<ext;

    kipl::io::WriteTIFF(h, namemaker.str(),kipl::base::Float32);
	namemaker.str("");
	namemaker<<base<<"_d"<<N<<ext;

    kipl::io::WriteTIFF(d, namemaker.str(),kipl::base::Float32);

}

template <typename T>
WaveletTransform<T>::WaveletTransform(std::string name) :
	padtype(kipl::base::PadMirror),
    n_dims(2,0UL),
    kernel(name)
{
}

template <typename T>
void WaveletTransform<T>::SaveSpectrum(std::string fname)
{
	typename list<WaveletQuad<T> >::iterator it;
	for (it=data.begin(); it!=data.end(); it++) {
		it->SaveQuad(fname);
	}

}

template <typename T>
void WaveletTransform<T>::transform(kipl::base::TImage<T,2> img, int N)
{
	data.clear();
	WaveletQuad<T> quad;
	quad.a=img;
    n_dims=img.dims();

	for (int i=0; i<N; i++) {
		quad=transform(quad);
		quad.N=i+1;
		data.push_back(quad);
	}

}



template <typename T>
WaveletQuad<T> WaveletTransform<T>::transform(WaveletQuad<T> &q)
{
	// Maybe add one pixel after half, check with Matlab ...

    if ((q.a.Size(0)<static_cast<size_t>(kernel.size()) || (q.a.Size(1)<static_cast<size_t>(kernel.size()))))
		throw kipl::base::KiplException("Image smaller than wavelet kernel size",__FILE__,__LINE__);

    std::vector<size_t> dims={(q.a.Size(0)+kernel.size()-1+(q.a.Size(0) & 1))/2, (q.a.Size(1)+kernel.size()-1+(q.a.Size(1) & 1))/2};
	WaveletQuad<T> result(dims);

	transform(q.a, result.a, kernel.transH(), kernel.transH(), kernel.begin(), kernel.end());
	transform(q.a, result.h, kernel.transH(), kernel.transG(), kernel.begin(), kernel.end());
	transform(q.a, result.v, kernel.transG(), kernel.transH(), kernel.begin(), kernel.end());
	transform(q.a, result.d, kernel.transG(), kernel.transG(), kernel.begin(), kernel.end());

	return result;
}

template <typename T>
void WaveletTransform<T>::transform(kipl::base::TImage<T,2> &src,
		kipl::base::TImage<T,2> &dst,
		T const * const H,
		T const * const V,
		int begin, int end)
{
	int filter_width=end-begin+1;
	T *row=new T[src.Size(0)+2*filter_width+16];
	T *padded_row=row+filter_width;

    std::vector<size_t> tmpdims={dst.Size(0),src.Size(1)};

	kipl::base::TImage<T,2> tmp(tmpdims);
	tmp=T(0);

	// Transform rows
    for (int i=0; i<static_cast<int>(tmp.Size(1)); i++) {
		switch (padtype) {
		  case kipl::base::PadMirror   : pad_mirror(src.GetLinePtr(i),src.Size(0),row,filter_width); break;
		  case kipl::base::PadPeriodic : pad_periodic(src.GetLinePtr(i),src.Size(0),row,filter_width); break;
		  case kipl::base::PadZero     : pad_zero(src.GetLinePtr(i),src.Size(0),row,filter_width); break;
		  case kipl::base::PadSP0      : pad_sp0(src.GetLinePtr(i),src.Size(0),row,filter_width); break;
		  case kipl::base::PadSP1      : pad_sp1(src.GetLinePtr(i),src.Size(0),row,filter_width); break;
		  default          : pad_mirror(src.GetLinePtr(i),src.Size(0),row,filter_width); break;
		}
        T *dest = tmp.GetLinePtr(i);
#ifdef TUNING_WAVELETS
        int rest=dst.Size(0) & 3;
        int N4 = dst.Size(0) - rest - 4;
        int k;
        T *tr  = NULL;
        for (int j = begin; j <= end; j+=2)
        {
          tr=padded_row-j+1;
          for (k = 0; k < N4; k++)
          {
              dest[k]   += H[j] * tr[(k+k)] + H[j+1] * tr[(k+k)-1];
              dest[++k] += H[j] * tr[(k+k)] + H[j+1] * tr[(k+k)-1];
              dest[++k] += H[j] * tr[(k+k)] + H[j+1] * tr[(k+k)-1];
              dest[++k] += H[j] * tr[(k+k)] + H[j+1] * tr[(k+k)-1];
          }
          for ( ; k < dst.Size(0); k++)
              dest[k]   += H[j] * tr[(k+k)];

        }
#else
        for (int j = begin; j <= end; j++)
        {
          for (int k = 0; k < static_cast<int>(dst.Size(0)); k++)
          {
              dest[k] += H[j] * padded_row[(2*k)-j+1];
          }
        }
#endif
	}
	delete [] row;

	// Transform columns
	size_t h=tmp.Size(1);
    T * col=new T[h+2*filter_width+16];
    T * dstcol=new T[h+16];

     T * padded_col=col+filter_width;


     for (int x = 0; x < static_cast<int>(dst.Size(0)); x++)
     {
        get_col(tmp,dstcol,x,0,static_cast<int>(tmp.Size(1)));

		switch (padtype) {
			case kipl::base::PadMirror   : pad_mirror(dstcol,h,col,filter_width);   break;
			case kipl::base::PadPeriodic : pad_periodic(dstcol,h,col,filter_width); break;
			case kipl::base::PadZero     : pad_zero(dstcol,h,col,filter_width); break;
			case kipl::base::PadSP0      : pad_sp0(dstcol,h,col,filter_width); break;
			case kipl::base::PadSP1      : pad_sp1(dstcol,h,col,filter_width); break;
			default 		 : pad_mirror(dstcol,h,col,filter_width);   break;
		}

        memset(dstcol,0,h*sizeof(T));
#ifdef TUNING_WAVELETS
        int rest=dst.Size(1) & 3;
        int N4 = dst.Size(1) - rest -4;
        int k;
        T *tc=NULL;

        for (int m = begin; m <= end; m+=2)
        {
            tc=padded_col-m+1;

            for (k = 0; k < N4; k++)
            {
                dstcol[k] += V[m] * tc[(k+k)] + V[m+1] * tc[(k+k)-1];
                dstcol[++k] += V[m] * tc[(k+k)] + V[m+1] * tc[(k+k)-1];
                dstcol[++k] += V[m] * tc[(k+k)] + V[m+1] * tc[(k+k)-1];
                dstcol[++k] += V[m] * tc[(k+k)] + V[m+1] * tc[(k+k)-1];
            }
            for ( ; k < dst.Size(1); k++)
                dstcol[k] += V[m] * tc[(k*2)];
        }
#else
        for (int m = begin; m <= end; m++)
        {
            for (int k = 0; k < static_cast<int>(dst.Size(1)); k++)
            {
                dstcol[k] += V[m] * padded_col[(2*k)-m+1];
            }
        }
#endif
		set_col(dstcol,dst,x,0,dst.Size(1));
     }
     delete [] col;
     delete [] dstcol;

}


template <typename T>
kipl::base::TImage<T,2> WaveletTransform<T>::synthesize()
{
	typename std::list<WaveletQuad<T> >::reverse_iterator previous;
	previous=data.rbegin();
	typename std::list<WaveletQuad<T> >::reverse_iterator current=previous;
	current++;

	for (; current!=data.rend(); current++) {
		synthesize(*previous,current->a);
		previous=current;
	}

    std::vector<size_t> dims={data.begin()->a.Size(0)*2, data.begin()->a.Size(1)*2};
	kipl::base::TImage<T,2> img(dims);
	synthesize(*previous,img);
	kipl::base::TImage<T,2> result(n_dims);

    for (size_t y=0; y<n_dims[1]; ++y)
		memcpy(result.GetLinePtr(y),img.GetLinePtr(y),sizeof(T)*n_dims[0]);

	return result;
}

template <typename T>
void WaveletTransform<T>::synthesize(WaveletQuad<T> &src, kipl::base::TImage<T,2> &dst)
{
    kipl::base::TImage<T> img(dst.dims());
	dst=static_cast<T>(0);

	upsconv(src.a,dst,kernel.synthH(),kernel.synthH());

	upsconv(src.h,img,kernel.synthH(),kernel.synthG());
	dst+=img;
	upsconv(src.v,img,kernel.synthG(),kernel.synthH());
	dst+=img;
	upsconv(src.d,img,kernel.synthG(),kernel.synthG());
	dst+=img;
}

// Padding methods of the lines to be filtered
template <typename T>
void WaveletTransform<T>::pad_mirror(T * src, int nsrc, T * dst, int insert_pos)
{
	int odd=nsrc & 1;
	memcpy(dst+insert_pos,src,nsrc*sizeof(T));
#ifdef TUNING_WAVELETS0
    T* dst2=dst+insert_pos+nsrc;
    T* src1=src+insert_pos-1;
    T* src2=src+nsrc-1;
    for (int i=0; i<insert_pos; i++) {
        dst[i]=src1[-i];
        dst2[i]=src2[-i];
    }
    if (odd)
        dst[2*insert_pos+nsrc+1]=src[nsrc-insert_pos-2];
#else
	for (int i=0; i<insert_pos; i++) {
		dst[i]=src[insert_pos-i-1];
		dst[insert_pos+nsrc+i]=src[nsrc-1-i];
	}
	if (odd)
		dst[2*insert_pos+nsrc+1]=src[nsrc-insert_pos-2];
#endif
}


template <typename T>
void WaveletTransform<T>::pad_periodic(T * src, int nsrc, T * dst, int insert_pos)
{
	memcpy(dst+insert_pos,src,nsrc*sizeof(T));
	memcpy(dst,src+nsrc-insert_pos,insert_pos*sizeof(T));
	memcpy(dst+nsrc+insert_pos-1,src,insert_pos*sizeof(T));
}

template <typename T>
void WaveletTransform<T>::pad_zero(T * src, int nsrc, T * dst, int insert_pos)
{
	memcpy(dst+insert_pos,src,nsrc*sizeof(T));
	for (int i=0; i<insert_pos; i++) {
		dst[i]=0;
		dst[insert_pos+nsrc+i]=0;
	}
}

template <typename T>
void WaveletTransform<T>::pad_sp0(T * src, int nsrc, T * dst, int insert_pos)
{
	memcpy(dst+insert_pos,src,nsrc*sizeof(T));
	int odd = nsrc & 1;
	if (odd)
		dst[insert_pos+nsrc]=src[nsrc-1];
	for (int i=0; i<insert_pos; i++) {
		dst[i]=src[0];
		dst[insert_pos+nsrc+i+odd]=src[nsrc-1];

	}
}

template <typename T>
void WaveletTransform<T>::pad_sp1(T * src, int nsrc, T * dst, int insert_pos)
{
	memcpy(dst+insert_pos,src,nsrc*sizeof(T));

    double k1=min((src[nsrc-1]-src[nsrc-2])/2.0,(src[nsrc-3]-src[nsrc-4])/2.0);
    double k0=min((src[1]-src[0])/2.0,(src[3]-src[2])/2.0);

	for (int i=0; i<insert_pos; i++) {
		dst[i]=src[0]+static_cast<T>(k0*(i-1-insert_pos));
		dst[insert_pos+nsrc+i]=src[nsrc-1]+static_cast<T>(k1*(i+1));
	}
}

template <typename T>
void WaveletTransform<T>::get_col(kipl::base::TImage<T,2> &src, T* col, int xpos, int ypos, T len)
{
	size_t sx=src.Size(0);
	T * pSrc=src.GetLinePtr(ypos)+xpos;
	for (size_t c=0; c<len; c++)
	   col[c]=pSrc[c*sx];
}

template <typename T>
void WaveletTransform<T>::set_col(T* col, kipl::base::TImage<T,2> &dst, int xpos, int ypos, T len, int step)
{
	size_t sx=dst.Size(0)*step;
	T * pDst=dst.GetLinePtr(ypos)+xpos;

   if (step==1)
	   for (size_t c=0; c<len; c++)
		   pDst[c*sx]=col[c];
   else
	   for (size_t c=0; c<len; c++)
	   	   pDst[c*sx]=col[c];
}

template <typename T>
void WaveletTransform<T>::dyadup(T* src, T* dst, int N)
{
//	int offset=N % 2 ;
	for (int i=0; i<N; i++) {
		dst[2*i]=src[i];
		dst[2*i+1]=static_cast<T>(0);
	}
}

template <typename T>
void WaveletTransform<T>::upsconv(kipl::base::TImage<T> & src, kipl::base::TImage<T> & dst, T const * const kh, T const * const kv)
{
	upsconvRC(src,dst,kh,kv);
}

template <typename T>
void WaveletTransform<T>::upsconvRC(kipl::base::TImage<T> & src, kipl::base::TImage<T> & dst, T const * const kh, T const * const kv)
{
	  int c=0;
	  int w = src.Size(0);

	  unsigned int filter_width=kernel.size();

//	  unsigned int fw2=((kernel.size()>>1)+((filter_width & 1)));

	  size_t buffer_size = 0;
	  c=filter_width-2;
	  // Doing rows
	  buffer_size =2*w+2*filter_width+16;
	  T * row              = new T[buffer_size];
	  T * a_row            = new T[buffer_size];
	  T * a_row_padded     = a_row + filter_width ;

	  for (unsigned int y = 0; y < src.Size(1); y++)
	  {
		  switch (padtype) {
			  case kipl::base::PadMirror   :
				dyadup(src.GetLinePtr(y),row,src.Size(0));
				pad_mirror(row,src.Size(0)*2,a_row,filter_width);
				break;
			  case kipl::base::PadPeriodic :
				pad_periodic(src.GetLinePtr(y),w,a_row,filter_width);
				break;
			  case kipl::base::PadZero :
				pad_zero(src.GetLinePtr(y),w,a_row,filter_width);
				break;
			  case kipl::base::PadSP0 :
				pad_sp0(src.GetLinePtr(y),w,a_row,filter_width);
				break;
			  case kipl::base::PadSP1 :
				pad_sp1(src.GetLinePtr(y),w,a_row,filter_width);
				break;
			  default :
				pad_mirror(src.GetLinePtr(y),w,a_row,filter_width);
				break;
		  }

		  T * dest = dst.GetLinePtr(y);
		  memset(dest,0,(dst.Size(0))*sizeof(T));
		  for (int m=kernel.begin(); m<=kernel.end(); m++) {
			  int mc=c-m;
			  for (unsigned int k = 0; k < dst.Size(0); k++) {
				  //int km=k-m+c;
				  int km=k+mc;
				  dest[k] += a_row_padded[km] * kh[m];
			  }
		  }
	  }

	  delete [] row;
	  delete [] a_row;

	  // Doing columns
	  int h = src.Size(1);
	  int h2 = dst.Size(1);

	  buffer_size = 2*h+2*filter_width+16;
	  T * coltmp              = new T[buffer_size];
	  T * col              = new T[buffer_size];
	  T * a_col            = new T[buffer_size];
	  T * a_col_padded     = a_col + filter_width ;


	  for (unsigned int x = 0; x < dst.Size(0); x++)
	  {
		  switch (padtype) {
			  case kipl::base::PadMirror   :
				get_col(dst, coltmp, x, 0, h); dyadup(coltmp,col,h); pad_mirror(col,2*h,a_col,filter_width);
				break;
			  case kipl::base::PadPeriodic :
				get_col(dst, col, x, 0, h); pad_periodic(col,h,a_col,filter_width);
				break;
			  case kipl::base::PadZero :
				get_col(dst, col, x, 0, h); pad_zero(col,h,a_col,filter_width);
				break;
			  case kipl::base::PadSP0 :
				get_col(dst, col, x, 0, h); pad_sp0(col,h,a_col,filter_width);
				break;
			  case kipl::base::PadSP1 :
				get_col(dst, col, x, 0, h); pad_sp1(col,h,a_col,filter_width);
				break;
			  default :
				get_col(dst, col, x, 0, h); pad_mirror(col,h,a_col,filter_width);
				break;
		  }

		  memset(col,0,buffer_size*sizeof(T));

		  for (int m=kernel.begin(); m<=kernel.end(); m++) {
			  int mc=c-m;
			  for (int k = 0; k < 2*h; k++) {
				  //int km=k-m+c;
				  int km=k+mc;

				  col[k]   += a_col_padded[km] * kv[m];
			  }
		  }

		  set_col(col, dst, x, 0, h2, 1);
	  }

	  delete [] a_col;
	  delete [] col;
	  delete [] coltmp;


}

}} // end of namespaces


#endif /* WAVELETS_HPP_ */

// Filter banks
/*
	SYMM 1 - SYMM 3

SYMM1 - SYMM3 coincide with DAUB1 - DAUB3
SYMM 4

[0, 7] -0.07576571478950233, -0.02963552764600275, 0.497618667632775, 0.8037387518051327, 0.2978577956053062, -0.09921954357663366, -0.01260396726203138, 0.03222310060405147
SYMM 5

[0, 9] 0.0195388827352497, -0.02110183402468898, -0.1753280899080548, 0.01660210576451275, 0.6339789634567916, 0.7234076904040388, 0.1993975339768545, -0.03913424930231376, 0.02951949092570631, 0.02733306834499873
SYMM 6

[0, 11] 0.01540410932704474, 0.003490712084221531, -0.1179901111485212, -0.04831174258569789, 0.4910559419279768, 0.7876411410286536, 0.3379294217281644, -0.07263752278637825, -0.02106029251237119, 0.04472490177078142, 0.001767711864253766, -0.007800708325032496
SYMM 7

[0, 13] 0.01026817670846495, 0.004010244871523197, -0.1078082377032895, -0.1400472404429405, 0.2886296317506303, 0.7677643170048699, 0.5361019170905749, 0.01744125508685128, -0.04955283493703385, 0.06789269350122353, 0.03051551316588014, -0.01263630340323927, -0.001047384888679668, 0.002681814568260057
SYMM 8

[0, 15] -0.003382415951003908, -0.000542132331797018, 0.03169508781151886, 0.00760748732494897, -0.1432942383512576, -0.06127335906765891, 0.4813596512592537, 0.7771857516996492, 0.3644418948360139, -0.05194583810802026, -0.02721902991713553, 0.04913717967372511, 0.003808752013880463, -0.01495225833706814, -0.0003029205147226741, 0.001889950332768561
SYMM 9

[0, 17] 0.001069490032908175, -0.0004731544986808867, -0.01026406402762793, 0.008859267493410117, 0.06207778930285313, -0.01823377077946773, -0.1915508312971598, 0.03527248803579076, 0.6173384491414731, 0.7178970827644066, 0.2387609146068536, -0.05456895843120489, 0.0005834627459892242, 0.03022487885821281, -0.01152821020772933, -0.01327196778183437, 0.0006197808889867399, 0.001400915525915921
SYMM 10

[0, 19] 0.0007701598091036597, 0.00009563267068491565, -0.008641299277002591, -0.001465382581138532, 0.04592723923095083, 0.0116098939028464, -0.1594942788849671, -0.0708805357805798, 0.4716906669415791, 0.7695100370206782, 0.3838267610640166, -0.03553674047551473, -0.03199005688220715, 0.04999497207760673, 0.005764912033412411, -0.02035493981234203, -0.0008043589319389408, 0.004593173585320195, 0.00005703608359777954, -0.0004593294210107238
SYMM 11

[0, 21] 0.0004892636102790465, 0.00011053509770077, -0.006389603666537886, -0.002003471900538333, 0.04300019068196203, 0.03526675956730489, -0.1446023437042145, -0.2046547945050104, 0.2376899090326669, 0.7303435490812422, 0.5720229780188006, 0.09719839447055164, -0.02283265101793916, 0.06997679961196318, 0.03703741598066749, -0.0240808415947161, -0.009857934828835874, 0.006512495674629366, 0.0005883527354548924, -0.001734366267274675, -0.00003879565575380471, 0.0001717219506928879
SYMM 12

[0, 23] -0.0001790665869786187, -0.0000181580788773471, 0.002350297614165271, 0.0003076477963025531, -0.01458983644921009, -0.002604391031185636, 0.05780417944546282, 0.01530174062149447, -0.1703706972388913, -0.07833262231005749, 0.4627410312313846, 0.7634790977904264, 0.3988859723844853, -0.0221623061807925, -0.03584883074255768, 0.04917931829833128, 0.007553780610861577, -0.02422072267559388, -0.001408909244210085, 0.007414965517868044, 0.0001802140900854918, -0.001349755755614803, -0.00001135392805049379, 0.0001119671942470856
SYMM 13

[0, 25] 0.00007042986709788876, 0.00003690537416474083, -0.0007213643852104347, 0.0004132611973679777, 0.00567485376954048, -0.00149244724795732, -0.02074968632748119, 0.01761829684571489, 0.09292603099190611, 0.008819757923922775, -0.1404900930989444, 0.1102302225796636, 0.6445643835707201, 0.6957391508420829, 0.1977048192269691, -0.1243624606980946, -0.05975062792828035, 0.01386249731469475, -0.01721164274779766, -0.02021676815629033, 0.005296359721916584, 0.007526225395916087, -0.0001709428497111897, -0.001136063437095249, -0.0000357386241733562, 0.00006820325245288671
SYMM 14

[0, 27] 0.00004461898110644152, 0.00001932902684197359, -0.0006057602055992672, -0.00007321430367811753, 0.004532677588409982, 0.001013142476182283, -0.01943931472230284, -0.002365051066227485, 0.06982761641982026, 0.02589859164319225, -0.1599974161449017, -0.05811184934484923, 0.4753357348650867, 0.7599762436030552, 0.3932015487235067, -0.03531809075139569, -0.05763449302747868, 0.03743308903888159, 0.004280522331795536, -0.02919621738508546, -0.002753775776578359, 0.01003769335863697, 0.000366476770515625, -0.002579441672422145, -0.00006286548683867455, 0.0003984356519092697, 0.00001121086996816579, -0.00002587908845615303
SYMM 15

[0, 29] 0.00002866070677120333, 0.00002171787955311147, -0.0004021685533613114, -0.0001081543887175515, 0.003481028703942169, 0.001526137844414152, -0.01717125372019869, -0.008744789536991206, 0.06796982865464372, 0.06839330637828124, -0.1340563101529709, -0.1966263778558184, 0.2439626866290417, 0.7218430206728932, 0.5786404210564978, 0.1115337122112223, -0.04108264812160452, 0.04073549232451155, 0.0219376493087618, -0.03887671358112607, -0.01940501010809092, 0.01007997710234975, 0.003423450420331992, -0.003590165587998719, -0.0002673164968523743, 0.00107056717058685, 0.00005512252372901569, -0.0001606618669228563, -7.359664092097746*10^-6, 9.712420309178714*10^-6
COIF 2

[ , ] to be added -0.0727326195687135, 0.3378976625136688, 0.8525720203239746, 0.3848648467524837, -0.0727326195687135, -0.01565572807960496
COIF 4

[-4, ] 0.01638733646343463, -0.04146493678721403, -0.06737255472451776, 0.3861100668241113, 0.8127236354502723, 0.4170051844212678, -0.07648859907841388, -0.0594344186451854, 0.02368017194655153, 0.005611434819108795, -0.001823208870779224, -0.0007205494455409002
COIF 6

[-6, ] -0.0037935128644205, 0.007782596425733068, 0.02345269614229068, -0.06577191128182785, -0.06112339000341938, 0.4051769024100017, 0.7937772226265062, 0.4284834763762174, -0.07179982161924338, -0.08230192710546832, 0.03455502757314781, 0.01588054486336488, -0.009007976136608807, -0.002574517688101351, 0.001117518770800574, 0.0004662169598255228, -0.00007098330250548274, -0.00003459977319755146
COIF 8

[-8, ] 0.0008923139025912371, -0.001629492425310232, -0.007346167936666454, 0.01606894713223725, 0.02668230467083802, -0.08126671025148722, -0.05607731960560099, 0.4153084270052037, 0.78223893442605, 0.4343860331088224, -0.06662747236728571, -0.09622042453167246, 0.03933442260501269, 0.02508225333593889, -0.01521172818704818, -0.005658283799635941, 0.003751434696869347, 0.001266561078897503, -0.0005890202245828889, -0.0002599743371316542, 0.0000623388543104137, 0.0000312298615998591, -3.259647939915774*10^-6, -1.784990914526781*10^-6
COIF 10

[-10, ] -0.0002120818620671953, 0.0003585777411615981, 0.002178294377842235, -0.004159312627576488, -0.01013158484688221, 0.02340832211891541, 0.02816974427047767, -0.09192158806004176, -0.05204667025344189, 0.4215712667306567, 0.7742936228601779, 0.4379823066593109, -0.0620377515748451, -0.1055631513075011, 0.04128753047203542, 0.0326747994671845, -0.01975839160094039, -0.009159507338744667, 0.006761520220622586, 0.002431575442562537, -0.001661627303935214, -0.0006375589261309571, 0.0003018579416702693, 0.0001403563281242023, -0.00004121986192457793, -0.00002127022167251858, 3.700727711352438*10^-6, 2.061220398581108*10^-6, -1.623799517208891*10^-7, -9.604010112783001*10^-8
	*/
