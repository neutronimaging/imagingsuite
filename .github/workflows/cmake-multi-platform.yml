# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "RemoveExternal" ]
  pull_request:
    branches: [ "RemoveExternal" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-2022]
        build_type: [Release]
        c_compiler: [cl, gcc]
        include:
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
            cl: 17
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            gcc: 11
        exclude:
          - os: windows-2022
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          # - os: windows-2022
          #   c_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: gcc


    steps:
      # Checkouts all the nesecary source code to build the project
    - name: Checkout imagingsuite source code
      uses: actions/checkout@v4
      with:
        path: imagingsuite
        fetch-depth: 0
    # Are these code sources actually nessecary or not?
    # - name: Checkout neutronimaging/ExternalDependencies     <-- clone https://github.com/neutronimaging/ExternalDependencies.git
    #   uses: actions/checkout@v4
    #   with:
    #     repository: neutronimaging/ExternalDependencies
    #     path: ExternalDependencies
    - name: Checkout neutronimaging/TestData                 <-- clone https://github.com/neutronimaging/TestData.git
      uses: actions/checkout@v4
      with:
        repository: neutronimaging/TestData
        path: TestData
    # - name: Checkout neutronimaging/scripts                  <-- clone https://github.com/neutronimaging/scripts.git
    #   uses: actions/checkout@v4
    #   with:
    #     repository: neutronimaging/scripts
    #     path: scripts

    - name: Conan installation
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.1.0

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.2.4'
        dir: '${{GITHUB.WORKSPACE}}'
        install-deps: 'true'
        modules: 'qtcharts'

    - name: Set reusable strings
        # Set environment variables for the subsequent steps of the job
      id: strings
      shell: bash
      run: |
        echo "QTPATH=${{env.Qt6_DIR}}" >> "$GITHUB_ENV"

    - name: Run conan
      working-directory: imagingsuite
      shell: bash
      run: |
        if [ "${RUNNER_OS}" == "Windows" ]; then
          conan install . --profile:host profiles/windows_msvc_17_release --profile:build profiles/windows_msvc_17_release
        elif [ "${RUNNER_OS}" == "Linux" ]; then
          conan install . --profile:host profiles/linux_gcc_11_release --profile:build profiles/linux_gcc_11_release
        fi

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      working-directory: build-imagingsuite
      run: |
        cmake --version
        cmake ../imagingsuite/ -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_PREFIX_PATH='${{env.Qt6_Dir}}/lib/cmake/'

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      working-directory: build-imagingsuite
      run: |
        cmake --build . --config ${{ matrix.build_type }}
  
    - name: Qt Deploy
      working-directory: build-imagingsuite
      shell: bash
      run: |
        if [ "${RUNNER_OS}" == "Windows" ]; then
          cd applications/Release
          ${QTPATH}/bin/windeployqt muhrec.exe
          ${QTPATH}/bin/windeployqt imageviewer.exe
        fi

    - name: Test
      id: tests
      working-directory: build-imagingsuite
      #Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      #See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
      continue-on-error: true

    - name: Archive test results
      if: steps.tests.outcome == 'failure'
      uses: actions/upload-artifact@master
      with:
        name: ${{runner.os}}-test-results
        path: ${{ github.workspace }}/build-imagingsuite/Testing

    - name: Compress artifact
      shell: bash
      run: |
        if [ "${RUNNER_OS}" == "Windows" ]; then
          7z a MuhRec-Windows.zip "build-imagingsuite/applications/Release/*" -xr!t*.exe -xr!muhreccli.exe -xr!verticalslicer.exe "build-imagingsuite/lib/Release/*.cp*" #-xr!Testing
        elif [ "${RUNNER_OS}" == "Linux" ]; then
          cd build-imagingsuite/Release/applications
          zip -r ../../../MuhRec-Linux.zip * -x "t*" -x "verticalslicer"
        fi

    - name: Save build artifact
      uses: actions/upload-artifact@master
      with:
        name: MuhRec-${{runner.os}}
        path: "${{ github.workspace }}/MuhRec*.zip"